import { Router } from 'express';
import { Request, Response } from 'express';
import prisma from '../lib/prisma';
import { authMiddleware } from '../middleware/auth';

const router = Router();

// Type for the authenticated request
interface AuthRequest extends Request {
  user?: {
    userId: string;
  };
}

// --- PUBLIC ROUTES ---

router.get('/', async (req: Request, res: Response) => {
  try {
    const posts = await prisma.post.findMany({
      where: { status: 'PUBLISHED' },
      orderBy: { createdAt: 'desc' },
      include: { author: { select: { email: true } } },
    });
    res.json(posts);
  } catch (error) {
    res.status(500).json({ error: 'Failed to retrieve posts' });
  }
});

router.get('/admin/all', authMiddleware, async (req: AuthRequest, res: Response) => {
  const userId = req.user?.userId;
  const { status, featured, search } = req.query;
  
  try {
    const where: any = { authorId: userId };
    
    // Add status filter
    if (status) {
      where.status = status;
    }
    
    // Add featured filter
    if (featured === 'true') {
      where.featured = true;
    } else if (featured === 'false') {
      where.featured = false;
    }
    
    // Add search filter
    if (search) {
      where.OR = [
        { title: { contains: search as string, mode: 'insensitive' } },
        { content: { contains: search as string, mode: 'insensitive' } }
      ];
    }

    const posts = await prisma.post.findMany({
      where,
      orderBy: { createdAt: 'desc' },
      include: {
        author: {
          select: { email: true }
        },
        _count: {
          select: { comments: true }
        }
      }
    });
    
    res.json({ posts });
  } catch (error) {
    console.error('Error fetching posts:', error);
    res.status(500).json({ error: 'Failed to retrieve admin posts' });
  }
});

router.get('/:slug', async (req: Request, res: Response) => {
  const { slug } = req.params;
  try {
    const post = await prisma.post.findUnique({
      where: { slug },
      include: { author: { select: { email: true } } },
    });
    if (!post) {
      return res.status(404).json({ error: 'Post not found' });
    }
    res.json(post);
  } catch (error) {
    res.status(500).json({ error: 'Failed to retrieve post' });
  }
});

router.get('/id/:id', authMiddleware, async (req: AuthRequest, res: Response) => {
  const { id } = req.params;
  const userId = req.user?.userId;
  try {
    const post = await prisma.post.findUnique({ where: { id } });
    if (!post || post.authorId !== userId) {
      return res.status(403).json({ error: 'Forbidden: You cannot access this post' });
    }
    res.json(post);
  } catch (error) {
    res.status(500).json({ error: 'Failed to retrieve post for editing' });
  }
});

router.post('/', authMiddleware, async (req: AuthRequest, res: Response) => {
  try {
    const { title, content, status, featured } = req.body;
    const authorId = req.user?.userId;
    if (!authorId) {
      return res.status(403).json({ error: 'User not authenticated properly' });
    }
    const slug = title.toLowerCase().replace(/\s+/g, '-').replace(/[^\w-]+/g, '');
    
    const newPost = await prisma.post.create({
      data: {
        title,
        slug,
        content,
        authorId,
        status: status || 'DRAFT',
        featured: featured || false,
        publishedAt: status === 'PUBLISHED' ? new Date() : null,
      },
    });
    res.status(201).json(newPost);
  } catch (error) {
    console.error('Error creating post:', error);
    res.status(500).json({ error: 'Failed to create post' });
  }
});

router.put('/:id', authMiddleware, async (req: AuthRequest, res: Response) => {
  try {
    const { id } = req.params;
    const { title, content, status, featured } = req.body;
    const userId = req.user?.userId;
    
    const post = await prisma.post.findUnique({ where: { id } });
    if (!post || post.authorId !== userId) {
      return res.status(403).json({ error: 'Forbidden: You cannot edit this post' });
    }

    const updatedPost = await prisma.post.update({
      where: { id },
      data: {
        title,
        content,
        status,
        featured,
        publishedAt: status === 'PUBLISHED' && !post.publishedAt ? new Date() : post.publishedAt,
      },
    });
    res.json(updatedPost);
  } catch (error) {
    console.error('Error updating post:', error);
    res.status(500).json({ error: 'Failed to update post' });
  }
});

router.delete('/:id', authMiddleware, async (req: AuthRequest, res: Response) => {
  try {
    const { id } = req.params;
    const userId = req.user?.userId;
    
    const post = await prisma.post.findUnique({ where: { id } });
    if (!post || post.authorId !== userId) {
      return res.status(403).json({ error: 'Forbidden: You cannot delete this post' });
    }

    await prisma.post.delete({ where: { id } });
    res.json({ message: 'Post deleted successfully' });
  } catch (error) {
    console.error('Error deleting post:', error);
    res.status(500).json({ error: 'Failed to delete post' });
  }
});

export default router;
