// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Must be postgresql
  url      = env("DATABASE_URL")
}

// User Model: for admin accounts
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
}

// Category Model: for organizing posts
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?  // Hex color for UI
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Tag Model: for flexible post tagging
model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Post Model: for blog entries
model Post {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  content     String     @db.Text
  excerpt     String?    @db.Text
  status      PostStatus @default(DRAFT)
  featured    Boolean    @default(false)
  published   Boolean    @default(false)
  publishedAt DateTime?
  scheduledAt DateTime?
  authorId    String
  author      User       @relation(fields: [authorId], references: [id])
  
  // New fields for enhanced blog features
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  tags        Tag[]
  
  // SEO and metadata
  metaTitle       String?
  metaDescription String?
  keywords        String?
  
  // Analytics
  views           Int @default(0)
  likes           Int @default(0)
  
  comments        Comment[]
  postViews       PostView[]  // Add this relation field
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([authorId])
  @@index([categoryId])
  @@index([status])
  @@index([featured])
  @@index([publishedAt])
}

enum PostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  PRIVATE
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  author    String
  email     String?
  website   String?
  approved  Boolean  @default(false)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  parentId  String?
  replies   Comment[] @relation("CommentReplies")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Post View tracking for analytics
model PostView {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  ipAddress String?
  userAgent String?
  viewedAt  DateTime @default(now())
  
  @@index([postId])
  @@index([viewedAt])
}